
#include "ServiceStubGenerator.h"
#include <assert.h>

#include <jsoncpp/json/json.h>
using namespace rpcpp;

namespace
{

    std::string serviceStubTemplate(
        const std::string &macroName,
        const std::string &userClassName,
        const std::string &stubClassName,
        const std::string &stubProcedureBindings,
        const std::string &stubProcedureDefinitions)
    {
        std::string str =
            R"(
/*
 * This stub is generated by RPCPP, DO NOT modify it!
 */
#ifndef RPCPP_[macroName]STUB_H
#define RPCPP_[macroName]STUB_H

#include <jsoncpp/json/json.h>

#include "rpcpp/server/Server.h"

class [userClassName];

namespace rpcpp
{

    template <typename S>
    class [stubClassName]: noncopyable
    {
    protected:
        explicit [stubClassName](Server& server)
        {
            static_assert(std::is_same_v<S, [userClassName]>, "derived class name should be '[userClassName]'");

            [stubProcedureBindings]

        }

        ~[stubClassName]() = default;

    private:
        [stubProcedureDefinitions]

    private:
        S& convert()
        {
            return static_cast<S&>(*this);
        }
    };

}

#endif //RPCPP_[macroName]STUB_H
)";

        replaceAll(str, "[macroName]", macroName);
        replaceAll(str, "[userClassName]", userClassName);
        replaceAll(str, "[stubClassName]", stubClassName);
        replaceAll(str, "[stubProcedureBindings]", stubProcedureBindings);
        replaceAll(str, "[stubProcedureDefinitions]", stubProcedureDefinitions);
        return str;
    }

    std::string stubProcedureBindTemplate(
        const std::string &procedureName,
        const std::string &stubClassName,
        const std::string &stubProcedureName)
    {
        std::string str =
            R"(
            server.AddMethod("[procedureName]",std::bind(&[stubClassName]::[stubProcedureName], this, _1, _2));
                )";

        replaceAll(str, "[procedureName]", procedureName);
        replaceAll(str, "[stubClassName]", stubClassName);
        replaceAll(str, "[stubProcedureName]", stubProcedureName);
        return str;
    }

    std::string stubNotifyBindTemplate(
        const std::string &notifyName,
        const std::string &stubClassName,
        const std::string &stubNotifyName)
    {
        std::string str =
            R"(
            server.AddNotification("[notifyName]",std::bind(&[stubClassName]::[stubNotifyName],this,_1));
                )";

        replaceAll(str, "[notifyName]", notifyName);
        replaceAll(str, "[stubClassName]", stubClassName);
        replaceAll(str, "[stubNotifyName]", stubNotifyName);
        return str;
    }

    std::string stubProcedureDefineTemplate(
        const std::string &paramsFromJsonObject,
        const std::string &stubProcedureName,
        const std::string &procedureName,
        const std::string &procedureArgs)
    {
        std::string str =
            R"(
        void [stubProcedureName](Json::Value& request, json::Value &response)
        {
            auto& params = request["params"];
                
            [paramsFromJsonObject]
            auto result = convert().[procedureName]([procedureArgs]);
            response["ret"]=result;
                
        }
        )";
        replaceAll(str, "[paramsFromJsonObject]", paramsFromJsonObject);
        replaceAll(str, "[stubProcedureName]", stubProcedureName);
        replaceAll(str, "[procedureName]", procedureName);
        replaceAll(str, "[procedureArgs]", procedureArgs);
        return str;
    }

    std::string stubNotifyDefineTemplate(
        const std::string &paramsFromJsonObject,
        const std::string &stubNotifyName,
        const std::string &notifyName,
        const std::string &notifyArgs)
    {
        std::string str =
            R"(
        void [stubNotifyName](Json::Value& request)
        {
           auto& params = request["params"];
                
            [paramsFromJsonObject]
            auto result = convert().[notifyName]([notifyArgs]);
        }
        )";

        replaceAll(str, "[paramsFromJsonObject]", paramsFromJsonObject);
        replaceAll(str, "[stubNotifyName]", stubNotifyName);
        replaceAll(str, "[notifyName]", notifyName);
        replaceAll(str, "[notifyArgs]", notifyArgs);
        return str;
    }

    std::string argsDefineTemplate(
        const std::string &arg,
        const std::string &index,
        Json::ValueType type)
    {
        std::string str = R"(auto [arg] = params[[index]][method];)";
        std::string method = [=]()
        {
            //               nullValue = 0, ///< 'null' value
            //   intValue,      ///< signed integer value
            //   uintValue,     ///< unsigned integer value
            //   realValue,     ///< double value
            //   stringValue,   ///< UTF-8 string value
            //   booleanValue,  ///< bool value
            //   arrayValue,    ///< array value (ordered list)
            //   objectValue
            switch (type)
            {
            case Json::booleanValue:
                return ".asBool()";
            case Json::intValue:
                return ".asInt()";
            case Json::uintValue:
                return ".asUInt()";
            case Json::stringValue:
                return ".asString()";
            case Json::realValue:
                return "asDouble()";
            case Json::arrayValue:
            case Json::objectValue:
                return "";
            default:
                assert(false && "bad value type");
                return "bad type";
            }
        }();
        replaceAll(str, "[arg]", arg);
        replaceAll(str, "[index]", index);
        replaceAll(str, "[method]", method);
        return str;
    }

}

std::string ServiceStubGenerator::genStub()
{
    auto macroName = genMacroName();
    auto userClassName = genUserClassName();
    auto stubClassName = genStubClassName();

    auto bindings = genStubProcedureBindings();
    bindings.append(genStubNotifyBindings());

    auto definitions = genStubProcedureDefinitions();
    definitions.append(genStubNotifyDefinitions());

    return serviceStubTemplate(macroName,
                               userClassName,
                               stubClassName,
                               bindings,
                               definitions);
}

std::string ServiceStubGenerator::genMacroName()
{
    std::string result = serviceinfo.classname;
    for (char &c : result)
        c = static_cast<char>(toupper(c));
    return result.append("SERVICESTUB");
}

std::string ServiceStubGenerator::genUserClassName()
{
    return serviceinfo.classname + "Service";
}

std::string ServiceStubGenerator::genStubClassName()
{
    return serviceinfo.classname + "ServiceStub";
}

std::string ServiceStubGenerator::genStubProcedureBindings()
{
    std::string result;
    for (auto &p : serviceinfo.method)
    {
        auto procedureName = p.name;
        auto stubClassName = genStubClassName();
        auto stubProcedureName = genStubGenericName(p);

        auto binding = stubProcedureBindTemplate(
            procedureName,
            stubClassName,
            stubProcedureName);
        result.append(binding);
        result.append("\n");
    }
    return result;
}

std::string ServiceStubGenerator::genStubProcedureDefinitions()
{
    std::string result;
    for (auto &r : serviceinfo.method)
    {
        auto procedureName = r.name;
        auto stubProcedureName = genStubGenericName(r);

        if (r.params.size() > 0)
        {
            auto paramsFromJsonObject = genParamsFromJsonObject(r);
            auto procedureArgs = genGenericArgs(r);
            auto define = stubProcedureDefineTemplate(
                paramsFromJsonObject,
                stubProcedureName,
                procedureName,
                procedureArgs);

            result.append(define);
            result.append("\n");
        }
        else
        {
            auto define = stubProcedureDefineTemplate("", stubProcedureName, procedureName, "");
            result.append(define);
            result.append("\n");
        }
    }
    return result;
}

std::string ServiceStubGenerator::genStubNotifyBindings()
{
    std::string result;
    for (auto &p : serviceinfo.notification)
    {
        auto notifyName = p.name;
        auto stubClassName = genStubClassName();
        auto stubNotifyName = genStubGenericName(p);

        auto binding = stubNotifyBindTemplate(
            notifyName,
            stubClassName,
            stubNotifyName);
        result.append(binding);
        result.append("\n");
    }
    return result;
}

std::string ServiceStubGenerator::genStubNotifyDefinitions()
{
    std::string result;
    for (auto &r : serviceinfo.notification)
    {
        auto notifyName = r.name;
        auto stubNotifyName = genStubGenericName(r);

        if (r.params.size() > 0)
        {
            auto paramsFromJsonObject = genParamsFromJsonObject(r);
            auto notifyArgs = genGenericArgs(r);
            auto define = stubNotifyDefineTemplate(
                paramsFromJsonObject,
                stubNotifyName,
                notifyName,
                notifyArgs);

            result.append(define);
            result.append("\n");
        }
        else
        {
            auto define = stubNotifyDefineTemplate(
                "",
                stubNotifyName,
                notifyName,
                "");

            result.append(define);
            result.append("\n");
        }
    }
    return result;
}

template <typename Rpc>
std::string ServiceStubGenerator::genStubGenericName(const Rpc &r)
{
    return r.name + "Stub";
}


template <typename Rpc>
std::string ServiceStubGenerator::genGenericArgs(const Rpc &r)
{
    std::string result;
    Json::Value::Members mem = r.params.getMemberNames();
    for (std::string &arg : mem)
    {
        result.append(arg);
        result.append(", ");
    }
    return result;
}


template <typename Rpc>
std::string ServiceStubGenerator::genParamsFromJsonObject(const Rpc &r)
{
    Json::Value::Members mem = r.params.getMemberNames();
    for (std::string &arg : mem)
    {
        std::string index = "\"" + arg + "\"";
        std::string line = argsDefineTemplate(
            arg,
            index,
            r.params[arg].type());
        result.append(line);
        result.append("\n");
    }
    return result;
}