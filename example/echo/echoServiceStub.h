
/*
 * This stub is generated by RPCPP, DO NOT modify it!
 */
#ifndef RPCPP_ECHOSERVICESTUB_H
#define RPCPP_ECHOSERVICESTUB_H

#include <jsoncpp/json/json.h>
#include "rpcpp/common/noncopyable.h"
#include "rpcpp/server/RpcServer.h"

class echoService;

namespace rpcpp
{

    template <typename S>
    class echoServiceStub: noncopyable
    {
    protected:
        explicit echoServiceStub(RpcServer& server)
        {
            
            server.AddMethod("echo",std::bind(&echoServiceStub::echoStub, this, _1, _2));
                

            server.AddMethod("add",std::bind(&echoServiceStub::addStub, this, _1, _2));
                

        }
        ~echoServiceStub() = default;
    private:
        
        void echoStub(const Json::Value& request, Json::Value &response)
        {    
            auto message = request["message"].asString();

            auto result = convert().echo(message);
            response["ret"]=result;
                
        }
        

        void addStub(const Json::Value& request, Json::Value &response)
        {    
            auto a = request["a"].asInt();
auto b = request["b"].asInt();

            auto result = convert().add(a,b);
            response["ret"]=result;
                
        }
        

    private:
        S& convert()
        {
            return static_cast<S&>(*this);
        }
    };

}

#endif //RPCPP_ECHOSERVICESTUB_H
